#version: '3.9'
services:
  # db:
  #   container_name: db_tour
  #   image: mariadb:10.11.6
  #   environment:
  #     - MYSQL_ROOT_PASSWORD = ${MYSQL_ROOT_PASSWORD}
  #     - MYSQL_DATABASE = ${MYSQL_DATABASE}
  #     - MYSQL_USER = ${MYSQL_USER}
  #     - MYSQL_PASSWORD = ${MYSQL_PASSWORD}
  #     - TZ=Asia/Bangkok
  #   ports:
  #     - "9906:3306"
  #   env_file:
  #     - "./config/dev.env"
  #   volumes:
  #     - "./config/db_tour.sql:/docker-entrypoint-initdb.d/1.sql"
  # phpmyadmin:
  #   image: phpmyadmin/phpmyadmin
  #   ports:
  #     - "8000:80"
  #   #restart: always
  #   environment:
  #     PMA_HOST: db
  #   depends_on:
  #     - db
  db:
    container_name: db_tour
    image: postgres:16.2
    restart : on-failure
    ports:
      - 5432:5432
   #volumes:
   #  - ~/apps/postgres:/var/lib/postgresql/data
   #  - ./config/db_tour.sql:/docker-entrypoint-initdb.d/backup.sql
    environment:
      - POSTGRES_PASSWORD=pass_tour
      - POSTGRES_USER=user_tour
      - POSTGRES_DB=db_tour
    networks:
      - reverse
  pgadmin:
    image: dpage/pgadmin4
    container_name: postgres_db_tour
    ports:
      - "8000:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user_tour@postgres.com
      PGADMIN_DEFAULT_PASSWORD: pass_tour
    depends_on:
        - db
    networks:
      - reverse
  backend:
    # image: node
    container_name: backend-nodejs-tour
    build: ./backend
    volumes:
      - './backend:/app'
      - '/app/node_modules'
    ports:
      - "8080:8080"
    environment:
      - TZ=Asia/Bangkok
    depends_on:
      - db
    networks:
      - reverse
  frontend:
    container_name: frontend-reactjs-tour
    build: ./frontend
    volumes:
      - './frontend:/app'
      - '/app/node_modules'
    tty: true
    ports:
      - '3000:3000'
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - TZ=Asia/Bangkok
    stdin_open: true
    depends_on:
      - db
      - backend
    networks:
      - reverse
  nginx:
    container_name: revproxy
    build: ./nginx_revproxy
    image: nginx:latest
    ports:
      - 80:80
    depends_on:
      - frontend
      - backend
    networks:
      - reverse
networks:
  reverse:
    driver: bridge
#git command 
#git rm [file.path] // repo and local
#git rm --cached [file.path] // repo only

#git rm -r [file.path] // repo and local all folder
#git rm -r --cached [file.path] // repo only all folder

#git reset --hard [commit_id]
#git log --graph --oneline --decorate

#create network => docker network create reverse
#frontend
#npm init
#npx create-react-app [projectname] || npm install -g create-react-app

#backend
#npm init
#npm i express cors dotenv

#docker ps //check status images
#docker ps
#docker inspect [container_id]

#docker-compose
#docker-compose up --build
#docker-compose down -v
#docker-compose down && docker-compose build --no-cache && docker-compose up